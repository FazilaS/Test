x <- rnorm(100)
y <- rnorm(100)
png(file_name)
plot(x, y, main = paste("Image", i))
dev.off()
# Print message indicating image generation
cat("Image", i, "generated.\n")
# Loop through each image
for (i in 1:num_images) {
# Generate image file name based on index
file_name <- paste0("image_", i, ".png")
# Generate plot or image processing code here
# Example: Plot a random scatterplot
set.seed(i)
x <- rnorm(100)
y <- rnorm(100)
png(file_name)
plot(x, y, main = paste("Image", i))
dev.off()
# Print message indicating image generation
cat("Image", i, "generated.\n")
}
# Function to generate multiple images
generate_images <- function(num_images) {
# Loop through each image
for (i in 1:num_images) {
# Generate image file name based on index
file_name <- paste0("image_", i, ".png")
# Generate plot or image processing code here
# Example: Plot a random scatterplot
set.seed(i)
x <- rnorm(100)
y <- rnorm(100)
png(file_name)
plot(x, y, main = paste("Image", i))
dev.off()
# Print message indicating image generation
cat("Image", i, "generated.\n")
}
}
# Call the function with desired number of images
generate_images(5)  # Change 5 to the desired number of images
# Function to generate multiple images
generate_images <- function(num_images) {
# Loop through each image
for (i in 1:num_images) {
# Generate image file name based on index
file_name <- paste0("image_", i, ".png")
# Generate plot or image processing code here
# Example: Plot a random scatterplot
set.seed(i)
x <- rnorm(100)
y <- rnorm(100)
png(file_name)
plot(x, y, main = paste("Image", i))
dev.off()
# Print message indicating image generation
cat("Image", i, "generated.\n")
}
}
# Call the function with desired number of images
generate_images(5)  # Change 5 to the desired number of images
# Required Libraries
libs <- c(
"terra",
"giscoR",
"sf",
"tidyverse",
"ggplot2",
"png"
)
# Install and load libraries
installed_libraries <- libs %in% rownames(installed.packages())
if(any(!installed_libraries)) {
install.packages(libs[!installed_libraries])
}
invisible(lapply(libs, library, character.only = TRUE))
# Function to generate urban street map for a city
generate_city_map <- function(city_name) {
# Get country boundaries
country_sf <- giscoR::gisco_get_countries(country = "CA", resolution = "20")
# Get city boundaries
city_sf <- giscoR::gisco_get_cities(city = city_name)
# Plot city map
ggplot() +
geom_sf(data = country_sf, fill = "lightgrey", color = "grey") +
geom_sf(data = city_sf, fill = "blue", color = "black") +
labs(title = paste("Urban Street Map of", city_name)) +
theme_minimal()
}
# List of cities
cities <- c("Vancouver", "Toronto", "Montreal")
# Generate and save map for each city
for (city in cities) {
# Generate map
city_map <- generate_city_map(city)
# Save map as PNG
png(file = paste0(city, "_urban_map.png"), width = 800, height = 600)
print(city_map)
dev.off()
}
# Generate and save map for each city
for (city in cities) {
# Generate map
city_map <- generate_city_map(city)
# Save map as PNG
png(file = paste0(city, "_urban_map.png"), width = 800, height = 600)
print(city_map)
dev.off()
}
# Required Libraries
libs <- c(
"osmdata",
"sf",
"ggplot2",
"png"
)
# Install and load libraries
installed_libraries <- libs %in% rownames(installed.packages())
if(any(!installed_libraries)) {
install.packages(libs[!installed_libraries])
}
invisible(lapply(libs, library, character.only = TRUE))
invisible(lapply(libs, library, character.only = TRUE))
# Function to generate urban street map for a city
generate_city_map <- function(city_name) {
# Get city boundaries
query <- paste0(city_name, ", Canada")
city_boundaries <- osmdata::osm_search(query)
city_sf <- osmdata::osmdata_sf(city_boundaries)
# Plot city map
ggplot() +
geom_sf(data = city_sf$osm_multipolygons, fill = "blue", color = "black") +
labs(title = paste("Urban Street Map of", city_name)) +
theme_minimal()
}
# List of cities
cities <- c("Vancouver", "Toronto", "Montreal")
# Generate and save map for each city
for (city in cities) {
# Generate map
city_map <- generate_city_map(city)
# Save map as PNG
png(file = paste0(city, "_urban_map.png"), width = 800, height = 600)
print(city_map)
dev.off()
}
# Required Libraries
libs <- c(
"osmdata",
"sf",
"ggplot2",
"png"
)
# Install and load libraries
installed_libraries <- libs %in% rownames(installed.packages())
if(any(!installed_libraries)) {
install.packages(libs[!installed_libraries])
}
invisible(lapply(libs, library, character.only = TRUE))
# Function to generate urban street map for a city
generate_city_map <- function(city_name) {
# Get city boundaries
query <- paste0(city_name, ", Canada")
city_boundaries <- osmdata::osm_search(query)
city_sf <- osmdata::osmdata_sf(city_boundaries)
# Plot city map
ggplot() +
geom_sf(data = city_sf$osm_multipolygons, fill = "blue", color = "black") +
labs(title = paste("Urban Street Map of", city_name)) +
theme_minimal()
}
# List of cities
cities <- c("Vancouver", "Toronto", "Montreal")
# Generate and save map for each city
for (city in cities) {
# Generate map
city_map <- generate_city_map(city)
# Save map as PNG
png(file = paste0(city, "_urban_map.png"), width = 800, height = 600)
print(city_map)
dev.off()
}
# Generate and save map for each city
for (city in cities) {
# Generate map
city_map <- generate_city_map(city)
# Save map as PNG
png(file = paste0(city, "_urban_map.png"), width = 800, height = 600)
print(city_map)
dev.off()
}
# Required Libraries
libs <- c(
"rnaturalearth",
"rnaturalearthdata",
"sf",
"ggplot2",
"png"
)
# Install and load libraries
installed_libraries <- libs %in% rownames(installed.packages())
if(any(!installed_libraries)) {
install.packages(libs[!installed_libraries])
}
invisible(lapply(libs, library, character.only = TRUE))
# Function to generate urban street map for a city
generate_city_map <- function(city_name) {
# Get city boundaries
city_sf <- ne_download(scale = 10, type = "countries", category = city_name)
# Plot city map
ggplot() +
geom_sf(data = city_sf, fill = "blue", color = "black") +
labs(title = paste("Urban Street Map of", city_name)) +
theme_minimal()
}
# List of cities
cities <- c("Vancouver", "Toronto", "Montreal")
# Generate and save map for each city
for (city in cities) {
# Generate map
city_map <- generate_city_map(city)
# Save map as PNG
png(file = paste0(city, "_urban_map.png"), width = 800, height = 600)
print(city_map)
dev.off()
}
# Generate and save map for each city
for (city in cities) {
# Generate map
city_map <- generate_city_map(city)
# Save map as PNG
png(file = paste0(city, "_urban_map.png"), width = 800, height = 600)
print(city_map)
dev.off()
}
# Required Libraries
libs <- c(
"rnaturalearth",
"rnaturalearthhires",
"sf",
"ggplot2",
"png"
)
# Install and load libraries
installed_libraries <- libs %in% rownames(installed.packages())
if(any(!installed_libraries)) {
install.packages(libs[!installed_libraries])
}
invisible(lapply(libs, library, character.only = TRUE))
# Required Libraries
libs <- c(
"rnaturalearth",
"rnaturalearthhires",
"sf",
"ggplot2",
"png"
)
# Install and load libraries
installed_libraries <- libs %in% rownames(installed.packages())
if(any(!installed_libraries)) {
install.packages(libs[!installed_libraries])
}
invisible(lapply(libs, library, character.only = TRUE))
# Required Libraries
libs <- c(
"terra",
"giscoR",
"sf",
"tidyverse",
"ggplot2",
"png"
)
# Install and load libraries
installed_libraries <- libs %in% rownames(installed.packages())
if(any(!installed_libraries)) {
install.packages(libs[!installed_libraries])
}
invisible(lapply(libs, library, character.only = TRUE))
# Function to generate urban street map for a city
generate_city_map <- function(city_name) {
# Get city boundaries
city_sf <- giscoR::gisco_get_cities(city = city_name)
# Plot city map
ggplot() +
geom_sf(data = city_sf, fill = "blue", color = "black") +
labs(title = paste("Urban Street Map of", city_name)) +
theme_minimal()
}
# List of cities
cities <- c("Vancouver", "Toronto", "Montreal")
# Generate and save map for each city
for (city in cities) {
# Generate map
city_map <- generate_city_map(city)
# Save map as PNG
png(file = paste0(city, "_urban_map.png"), width = 800, height = 600)
print(city_map)
dev.off()
}
# Generate and save map for each city
for (city in cities) {
# Generate map
city_map <- giscoR::generate_city_map(city)
# Save map as PNG
png(file = paste0(city, "_urban_map.png"), width = 800, height = 600)
print(city_map)
dev.off()
}
# Required Libraries
libs <- c(
"terra",
"sf",
"tidyverse",
"ggplot2",
"png"
)
# Install and load libraries
installed_libraries <- libs %in% rownames(installed.packages())
if(any(!installed_libraries)) {
install.packages(libs[!installed_libraries])
}
invisible(lapply(libs, library, character.only = TRUE))
# Function to generate urban street map for a city
generate_city_map <- function(city_name) {
# Create bounding box for the city
bbox <- gsub(" ", "%20", city_name)
# Download street map using OpenStreetMap API
download.file(
url = paste0("http://osm-internal.download.geofabrik.de/north-america/canada/british-columbia/",
bbox,
"-latest.osm.pbf"),
destfile = "urban_map.osm.pbf"
)
# Convert OSM data to SF object
osm_data <- osmdata_sf("urban_map.osm.pbf")
# Plot city map
ggplot() +
geom_sf(data = osm_data$osm_points, color = "blue") +
geom_sf(data = osm_data$osm_lines, color = "blue") +
geom_sf(data = osm_data$osm_polygons, fill = "blue", color = "black") +
labs(title = paste("Urban Street Map of", city_name)) +
theme_minimal()
}
# List of cities
cities <- c("Vancouver", "Toronto", "Montreal")
# Generate and save map for each city
for (city in cities) {
# Generate map
city_map <- generate_city_map(city)
# Save map as PNG
png(file = paste0(city, "_urban_map.png"), width = 800, height = 600)
print(city_map)
dev.off()
}
library(tidyverse)
library(osmdata)
library(sf)
library(showtext)
library(lwgeom)
# Add Google Fonts
font_add_google("Outfit", "title_font")
font_add_google("Cabin", "body_font")
showtext_auto()
# Define fonts
title_font <- "title_font"
body_font <- "body_font"
# Function to generate map for a city
generate_city_map <- function(city_name) {
# Get street data for the city
city_streets <- getbb(paste(city_name, "Canada", sep = ", ")) %>%
opq(timeout = 100) %>%
add_osm_feature(key = "highway",
value = c("motorway", "primary",
"secondary", "tertiary")) %>%
osmdata_sf()
# Get smaller street data for the city
small_city_streets <- getbb(paste(city_name, "Canada", sep = ", ")) %>%
opq(timeout = 100) %>%
add_osm_feature(key = "highway",
value = c("residential", "footway")) %>%
osmdata_sf()
# Plot city map
ggplot() +
geom_sf(data = small_city_streets$osm_lines,
inherit.aes = FALSE,
color = 'white',
size = 0.5,
alpha = 0.6) +
geom_sf(data = city_streets$osm_lines,
inherit.aes = FALSE,
color = 'white',
size = 0.5,
alpha = 0.6,
linewidth = 0.8) +
theme(plot.title = element_text(margin = margin(20, 0, 10, 0),
size = 30,
family = title_font,
color = "white",
face = "bold",
hjust = 0.5,
vjust = 2.5),
panel.background = element_rect(fill = "#2C3E4F", colour = "#2C3E4F"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_rect(color = "#2C3E4F", fill = "#2C3E4F"),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
plot.margin = margin(20, 40, 20, 40)) +
labs(title = city_name)
}
# List of cities
cities <- c("Vancouver", "Toronto", "Montreal")
# Generate and save map for each city
for (city in cities) {
# Generate map
city_map <- generate_city_map(city)
# Save map as PNG
ggsave(paste0(city, "_urban_map.png"), city_map, height = 8, width = 10, dpi = 320)
}
library(osmdata)
library(duckdb)
install.packages("duckdb")
library(duckdb)
# Function to fetch and store street data for a city
fetch_and_store_street_data <- function(city_name, db_conn) {
# Fetch street data for the city
city_streets <- getbb(paste(city_name, "Canada", sep = ", ")) %>%
opq(timeout = 100) %>%
add_osm_feature(key = "highway",
value = c("motorway", "primary",
"secondary", "tertiary")) %>%
osmdata_sf()
# Convert street data to a data frame
streets_df <- sf::st_drop_geometry(city_streets$osm_lines)
# Insert data into DuckDB database
duckdb::dbWriteTable(db_conn, paste(city_name, "_streets", sep = ""), streets_df)
}
# Create a DuckDB connection
db_conn <- duckdb::duckdb_connect("street_data.db")
# Create a DuckDB connection
db_conn <- DBI::dbConnect(RSQLite::SQLite(), "street_data.db")
# Create a DuckDB connection
db_conn <- duckdb::duckdb_connect("street_data.db")
# Create a DuckDB connection
db_conn <- duckdb::duckdb_connect()
library(tidyverse)
library(osmdata)
library(sf)
library(showtext)
library(lwgeom)
# Add Google Fonts
font_add_google("Outfit", "title_font")
font_add_google("Cabin", "body_font")
showtext_auto()
# Define fonts
title_font <- "title_font"
body_font <- "body_font"
# Function to generate map for a city
generate_city_map <- function(city_name) {
# Get street data for the city
# Get smaller street data for the city
small_city_streets <- getbb(paste(city_name, "Pakistan", sep = ", ")) %>%
opq(timeout = 100) %>%
add_osm_feature(key = "highway",
value = c("residential", "footway")) %>%
osmdata_sf()
# Plot city map
ggplot() +
geom_sf(data = small_city_streets$osm_lines,
inherit.aes = FALSE,
color = 'white',
size = 0.5,
alpha = 0.6) +
theme(plot.title = element_text(margin = margin(20, 0, 10, 0),
size = 40,
family = title_font,
color = "white",
face = "bold",
hjust = 0.5,
vjust = 2.5),
panel.background = element_rect(fill = "#2C3E4F", colour = "#2C3E4F"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_rect(color = "#2C3E4F", fill = "#2C3E4F"),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
plot.margin = margin(20, 40, 20, 40)) +
labs(title = city_name)
}
# List of cities
cities <- c("Karachi")
# Generate and save map for each city
for (city in cities) {
# Generate map
city_map <- generate_city_map(city)
# Save map as PNG
ggsave(paste0(city, "_urban_map.png"), city_map, height = 8, width = 10, dpi = 320)
}
# Disable showtext_auto
showtext_auto(FALSE)
getwd()
setwd("C:/Users/Pc/Documents/Github")
setwd("C:/Users/Pc/Documents/Github/vistales/test1/Test/posts/remit")
